openapi: 3.0.3
info:
  version: 1.3.0
  title: Conclave Cloud API
  description: The API for interacting with Conclave Cloud. See the `x-error-codes` for error codes. When reporting an error, please include the whole error response.
tags:
  - name: Platform
    description: General purpose endpoints regarding the Platform.
  - name: API Keys
    description: Management of API keys. A key is bound to a specific project and allows the usage of some of the endpoints of this API. To see what actions you can execute, check the `platform.whoami` operation.
  - name: Projects
    description: Management of projects. Every project can contain functions which can be invoked(see `Functions`,`Invocations` and `Keys`).
  - name: Functions
    description: Management of functions(see `Invocations` for calling functions/getting results). Every function is bound to a single project.
  - name: Keys
    description: Keys that are used to encrypt the payload when invoking functions.
  - name: Invocations
    description: Invocation of functions. You will need to encrypt the payload with the project public key(see `keys.public.get` operation of `Keys`).
security:
  - conclaveAuth: []
paths:
  /platform/info:
    get:
      description: Return information about the platform
      tags:
        - Platform
      operationId: platform.info
      responses:
        '200':
          $ref: "#/components/responses/Platform.Info"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        default:
          $ref: "#/components/responses/GenericError"
  /platform/whoami:
    get:
      description: Return information about the currently authenticated principal.
      tags:
        - Platform
      operationId: platform.whoami
      responses:
        '200':
          $ref: "#/components/responses/Platform.Whoami"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        default:
          $ref: "#/components/responses/GenericError"
  /projects/{projectUID}/apikeys:
    get:
      description: Return a list of all API keys of a project.
      x-permissions-required:
        $ref: "#/components/x-permissions/ApiKeys.Read"
      operationId: apikeys.list
      parameters:
        - $ref: "#/components/parameters/projectUID"
      tags:
        - API Keys
      responses:
        '200':
          $ref: "#/components/responses/ApiKeys.List"
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
    post:
      description: Create a new API key for a project.
      x-permissions-required:
        $ref: "#/components/x-permissions/ApiKeys.Write"
      operationId: apikeys.create
      parameters:
        - $ref: "#/components/parameters/projectUID"
      tags:
        - API Keys
      responses:
        '201':
          $ref: "#/components/responses/ApiKeys.Create"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
  /projects/{projectUID}/apikeys/{apiKeyUID}:
    delete:
      description: Delete an existing API key.
      x-permissions-required:
        $ref: "#/components/x-permissions/ApiKeys.Write"
      operationId: apikeys.delete
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/apiKeyUID"
      tags:
        - API Keys
      responses:
        '204':
          description: The API key was deleted successfully.
        '400':
          $ref: '#/components/responses/InvalidError'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
  /projects:
    get:
      description: Return a list of all projects.
      x-permissions-required:
        $ref: "#/components/x-permissions/Projects.Read"
      tags:
        - Projects
      operationId: projects.list
      responses:
        '200':
          $ref: "#/components/responses/Projects.List"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        default:
          $ref: "#/components/responses/GenericError"
    post:
      description: Create a new project.
      x-permissions-required:
        $ref: "#/components/x-permissions/Projects.Write"
      tags:
        - Projects
      operationId: projects.create
      requestBody:
        $ref: "#/components/requestBodies/Projects.Create"
      responses:
        '201':
          $ref: "#/components/responses/Projects.Create"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        default:
          $ref: "#/components/responses/GenericError"


  /projects/{projectUID}:
    get:
      description: Return data about a specific project.
      x-permissions-required:
        $ref: "#/components/x-permissions/Projects.Read"
      tags:
        - Projects
      operationId: projects.get
      parameters:
        - $ref: "#/components/parameters/projectUID"
      responses:
        '200':
          $ref: "#/components/responses/Projects.Get"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
    delete:
      description: Delete an existing project.
      x-permissions-required:
        $ref: "#/components/x-permissions/Projects.Write"
      tags:
        - Projects
      operationId: projects.delete
      parameters:
        - $ref: "#/components/parameters/projectUID"
      responses:
        '204':
          description: The project was deleted successfully.
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
          
  /projects/{projectUID}/directories/{path}:
    put:
        description: Create a directory
        operationId: createDirectory
        tags:
          - Directories
        parameters:
          - $ref: "#/components/parameters/projectUID"
          - $ref: "#/components/parameters/path"
        responses:
          '200':
            description: Successfully created the directory.
            content:
              application/json:
                schema:
                  $ref: '#/components/responses/Storage.FileMeta'
          '400':
            $ref: "#/components/responses/InvalidError"
          '401':
            $ref: "#/components/responses/UnauthorizedError"
          '403':
            $ref: "#/components/responses/ForbiddenError"
          '404':
            $ref: "#/components/responses/NotFoundError"
          default:
            $ref: "#/components/responses/GenericError"
    get:
        description: List the files and directories stored in the path.
        operationId: listStorage
        tags:
          - Directories
        parameters:
          - $ref: "#/components/parameters/projectUID"
          - $ref: "#/components/parameters/Storage.List.Limit"
          - $ref: "#/components/parameters/Storage.List.Skip"
          - $ref: "#/components/parameters/path"
        responses:
          '200':
            description: Successfully returned files stored.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/responses/Storage.FileMeta'
          '400':
            $ref: "#/components/responses/InvalidError"
          '401':
            $ref: "#/components/responses/UnauthorizedError"
          '403':
            $ref: "#/components/responses/ForbiddenError"
          '404':
            $ref: "#/components/responses/NotFoundError"
          default:
            $ref: "#/components/responses/GenericError"
    delete:
      description: Delete a directory from storage.
      tags:
        - Directories
      operationId: deleteDirectory
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/path"
      responses:
        '200':
          description: The file was deleted successfully.
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"    
  
              
  /projects/{projectUID}/storage/{path}:
    post:
      description: 'Upload a file to the cloud storage'
      operationId: uploadFile
      tags:
        - Storage
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/path"
      requestBody:
        $ref: '#/components/requestBodies/Storage.FileData'
      responses:
        '200':
          description: Successfully uploaded the file.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Storage.FileMeta'
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
    get:
      description: Get metadata from a particular file.
      operationId: getFile
      tags:
        - Storage
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/path"
      responses:
        '200':
          description: Successfully returned the file details.
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Storage.FileMeta'
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
    delete:
      description: Delete a file from storage.
      tags:
        - Storage
      operationId: deleteFile
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/path"
      responses:
        '200':
          description: The file was deleted successfully.
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"    

  /projects/{projectUID}/functions:
    get:
      description: Get the list of functions in a project.
      x-permissions-required:
        $ref: "#/components/x-permissions/Functions.Read"
      operationId: functions.list
      tags:
        - Functions
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/Functions.List.Limit"
        - $ref: "#/components/parameters/Functions.List.Skip"
      responses:
        '200':
          $ref: "#/components/responses/Functions.List"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"

  /projects/{projectUID}/functions/{functionName}:
    get:
      description: Get details for a particular function.
      x-permissions-required:
        $ref: "#/components/x-permissions/Functions.Read"
      operationId: functions.get
      tags:
        - Functions
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/functionName"
        - $ref: "#/components/parameters/Functions.Get.Code"
      responses:
        '200':
          $ref: "#/components/responses/Functions.Get"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
    put:
      description: Create or update a function.
      x-permissions-required:
        $ref: "#/components/x-permissions/Functions.Write"
      operationId: functions.createOrUpdate
      tags:
        - Functions
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/functionName"
      requestBody:
        $ref: '#/components/requestBodies/Functions.CreateOrUpdate'
      responses:
        '200':
          $ref: "#/components/responses/Functions.CreateOrUpdate"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
    delete:
      description: Delete an existing function.
      x-permissions-required:
        $ref: "#/components/x-permissions/Functions.Write"
      tags:
        - Functions
      operationId: functions.delete
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/functionName"
      responses:
        '204':
          description: The function was deleted successfully.
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"

  /projects/{projectUID}/keys/public:
    get:
      description: Return the public key for a project.
      x-permissions-required:
        $ref: "#/components/x-permissions/KeysPublic.Read"
      tags:
        - Keys
      operationId: keys.public.get
      parameters:
        - $ref: "#/components/parameters/projectUID"
      responses:
        '200':
          $ref: "#/components/responses/Keys.Public.Get"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        default:
          $ref: "#/components/responses/GenericError"

  /projects/{projectUID}/invocations:
    post:
      description: Invoke a function.
      x-permissions-required:
        $ref: "#/components/x-permissions/Invocations.Invoke"
      tags:
        - Invocations
      operationId: invocations.invoke
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/Invocations.Invoke.Blocking"
        - $ref: "#/components/parameters/Invocations.Invoke.ResultOnly"
        - $ref: "#/components/parameters/Invocations.Invoke.Timeout"
      requestBody:
        $ref: '#/components/requestBodies/Invocations.Invoke'
      responses:
        '200':
          $ref: "#/components/responses/Invocations.Invoke"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
    get:
      description: Get a list of invocations for a specific project.
      x-permissions-required:
        $ref: "#/components/x-permissions/Invocations.Read.List"
      tags:
        - Invocations
      operationId: invocations.list
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/Invocations.List.FunctionName"
        - $ref: "#/components/parameters/Invocations.List.Limit"
        - $ref: "#/components/parameters/Invocations.List.Skip"
        - $ref: "#/components/parameters/Invocations.List.Since"
        - $ref: "#/components/parameters/Invocations.List.Upto"
        - $ref: "#/components/parameters/Invocations.List.Docs"
      responses:
        '200':
          $ref: "#/components/responses/Invocations.List"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"


  /projects/{projectUID}/invocations/{invocationUID}:
    get:
      description: Get details for a specific invocation
      x-permissions-required:
        $ref: "#/components/x-permissions/Invocations.Read.Get"
      tags:
        - Invocations
      operationId: invocations.get
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/invocationUID"
      responses:
        '200':
          $ref: "#/components/responses/Invocations.Get"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"

  /projects/{projectUID}/invocations/{invocationUID}/logs:
    get:
      description: Get the logs for a specific invocation
      x-permissions-required:
        $ref: "#/components/x-permissions/Invocations.Read.Get"
      tags:
        - Invocations
      operationId: invocations.get.logs
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/invocationUID"
      responses:
        '200':
          $ref: "#/components/responses/Invocations.Get.Logs"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"

  /projects/{projectUID}/invocations/{invocationUID}/result:
    get:
      description: Get the result for a specific invocation
      x-permissions-required:
        $ref: "#/components/x-permissions/Invocations.Read.Get"
      tags:
        - Invocations
      operationId: invocations.get.result
      parameters:
        - $ref: "#/components/parameters/projectUID"
        - $ref: "#/components/parameters/invocationUID"
      responses:
        '200':
          $ref: "#/components/responses/Invocations.Get.Result"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
  /platform/usage:
    get:
      description: Return the usage summary for the specified monthly period.
      x-permissions-required:
        $ref: "#/components/x-permissions/Platform.Usage.Get"
      tags:
        - Platform
      operationId: platform.get.usage
      parameters:
        - $ref: "#/components/parameters/year"
        - $ref: "#/components/parameters/month"
      responses:
        '200':
          $ref: "#/components/responses/Platform.Usage"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
  /platform/invoicing:
    get:
      description: Return the invoicing summary for the specified monthly period.
      x-permissions-required:
        $ref: "#/components/x-permissions/Platform.Invoicing.Get"
      tags:
        - Platform
      operationId: platform.get.invoicing
      parameters:
        - $ref: "#/components/parameters/year"
        - $ref: "#/components/parameters/month"
      responses:
        '200':
          $ref: "#/components/responses/Platform.Invoicing"
        '400':
          $ref: "#/components/responses/InvalidError"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          $ref: "#/components/responses/ForbiddenError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        default:
          $ref: "#/components/responses/GenericError"
components:
  x-error-codes:
    UNAUTHORIZED: 100
    FORBIDDEN: 101
    ILLEGAL_ARGUMENT: 102
    ILLEGAL_METHOD: 103
    WSKADMIN_CONNECTION: 104
    FUNCTIONS_ERROR: 105
    NOT_FOUND: 106
    INVALID_ARGUMENT: 107
    GENERIC_ERROR: 108
    UNEXPECTED_ERROR: 109
    INVALID_CONTENT_TYPE: 110
    INVALID_REQUEST_BODY: 111
    REJECTED_REQUEST: 112
  x-permissions:
    Projects.Read: Projects.Read
    Projects.Write: Projects.Write
    Functions.Read: Functions.Read
    Functions.Write: Functions.Write
    Invocations.Read.List: Invocations.Read.List
    Invocations.Read.Get: Invocations.Read.Get
    Invocations.Invoke: Invocations.Invoke
    ApiKeys.Write: ApiKeys.Write
    ApiKeys.Read: ApiKeys.Read
    KeysPublic.Read: KeysPublic.Read
    Platform.Invoicing.Get: Platform.Invoicing.Get
    Platform.Usage.Get: Platform.Usage.Get
  securitySchemes:
    conclaveAuth:
      type: http
      description: "This API uses JWT tokens(attached via Authorization header) which can be obtained via various flows. Consult the authentication docs."
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    Projects.Create:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Projects.Create'
    Functions.CreateOrUpdate:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Functions.CreateOrUpdate'
    Invocations.Invoke:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Invocations.Invoke"
    Storage.FileData:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Storage.FileData'
  responses:
    Storage.FileMeta:
      description: The file metadata.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Storage.FileMeta'
    ApiKeys.Create:
      description: An API key that you can use to execute operations against a specific project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiKeys.Create'
    ApiKeys.List:
      description: A list of all API keys for the project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiKeys.List'
    Projects.Create:
      description: The project was successfully created.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Projects.Project'
    Projects.List:
      description: Successfully returned a list of all projects.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Projects.List'
    Projects.Get:
      description: Successfully returned information about the project.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Projects.Project'
    Functions.List:
      description: Successfully returned the function details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Functions.List'
    Functions.Get:
      description: Successfully returned the function details.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Functions.Function'
    Functions.CreateOrUpdate:
      description: Successfully created/updated the function.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Functions.Function'
    Keys.Public.Get:
      description: Successfully returned the public key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Keys.PublicKey'
    Invocations.Invoke:
      description: The function was invoked successfully.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Invocations.Invocation"
    Invocations.List:
      description: Successfully returned the invocation list.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Invocations.List"
    Invocations.Get:
      description: Successfully returned the invocation.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Invocations.Invocation"
    Invocations.Get.Result:
      description: Successfully returned the invocation result.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Invocations.Invocation.Result"
    Invocations.Get.Logs:
      description: Successfully returned the invocation logs.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Invocations.Invocation.Logs.List"
    InvalidError:
      description: Invalid request.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Generic.ErrorResponse'
    Platform.Info:
      description: Successfully returned information about the platform.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Platform.Info'
    Platform.Whoami:
      description: Successfully returned information about the current user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Platform.Whoami'
    Platform.Invoicing:
      description: Successfully returned invoicing information about the specified period.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Platform.Invoicing'
    Platform.Usage:
      description: Successfully returned usage information about the specified period.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Platform.Usage'
    UnauthorizedError:
      description: The request does not contain valid authentication.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Generic.ErrorResponse"
    ForbiddenError:
      description: The currently authenticated context does not have permissions to execute the operation.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Generic.ErrorResponse"
    NotFoundError:
      description: The specfied entity does not exist.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Generic.ErrorResponse"
          example:
            error:
              code: 107
              message: Entity could not be found
              detail: null
            requestId: 18450f48ea6e3e993c8ec5d24ff8ffebdf2523ec481bb2a7c392991dc5d83d80
    GenericError:
      description: Generic error.
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Generic.ErrorResponse'
  parameters:
    Functions.List.Limit:
      name: limit
      description: Number of entities to include in the result. A value of 0 sets the limit to the maximum.
      in: query
      required: false
      schema:
        type: integer
        default: 30
        minimum: 0
        maximum: 200
    Functions.List.Skip:
      name: skip
      description: Number of entities to skip in the result.
      in: query
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
    Functions.Get.Code:
      name: code
      description: Include function code in the result. Turning this on will make the response bigger.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    Invocations.Invoke.Blocking:
      name: blocking
      description: Control whether the response of the request will contain the result of the invocation.
      in: query
      required: false
      schema:
        type: boolean
        default: true
    Invocations.Invoke.ResultOnly:
      name: resultOnly
      description: Return only the result. This flag can only be set to `true` if the invocation is blocking(see the `blocking` parameter).
      in: query
      required: false
      schema:
        type: boolean
        default: false
    Invocations.Invoke.Timeout:
      name: timeout
      description: Maximum time which will be waited for a blocking invocation call.
      in: query
      required: false
      schema:
        type: integer
        minimum: 100
        maximum: 60000
    Invocations.List.FunctionName:
      name: functionName
      description: Name of the invoked function.
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/Functions.Name"
    Invocations.List.Limit:
      name: limit
      description: Number of entities to include in the result. A value of 0 sets the limit to the maximum.
      in: query
      required: false
      schema:
        type: integer
        default: 30
        minimum: 0
        maximum: 200
    Invocations.List.Skip:
      name: skip
      description: Number of entities to skip in the result.
      in: query
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
    Invocations.List.Since:
      name: since
      description: Only include entities later than this timestamp.(measured in milliseconds since Thu, 01 Jan 1970)
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 1
    Invocations.List.Upto:
      name: upto
      description: Only include entities earlier than this timestamp.(measured in milliseconds since Thu, 01 Jan 1970)
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 1
    Invocations.List.Docs:
      name: docs
      description: Whether to include full entity description.
      in: query
      required: false
      schema:
        type: boolean
        default: false
    apiKeyUID:
      name: apiKeyUID
      description: The UID of the API Key.
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ApiKey.Uid"
    month:
      name: month
      description: A valid month number (1-12 where 1 is January and 12 is December) (UTC).
      in: query
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 12
        example: 5
    year:
      name: year
      description: A valid year number (>=2022) (UTC).
      in: query
      required: true
      schema:
        type: integer
        minimum: 2022
        maximum: 3000
        example: 2022
    projectUID:
      name: projectUID
      description: The UID of a project.
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Project.Uid"
    invocationUID:
      name: invocationUID
      description: The UID of an invocation.
      in: path
      required: true
      schema:
        type: string
        pattern: "^[0-9a-zA-Z-_]{1,64}$"
    functionName:
      name: functionName
      description: Name of a function.
      example: hello-world
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Functions.Name"
    fileName:
      name: fileName
      description: Name of a file.
      example: filename.txt
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Storage.FileName"
    path:
      name: path
      description: Path of a directory or file.
      example: directory/file.txt
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Storage.Path"
    Storage.List.Limit:
      name: limit
      description: Number of entities to include in the result. A value of 0 sets the limit to the maximum.
      in: query
      required: false
      schema:
        type: integer
        default: 30
        minimum: 0
        maximum: 200
    Storage.List.Skip:
      name: skip
      description: Number of entities to skip in the result.
      in: query
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
  schemas:
    ApiKeys.ApiKey:
      type: object
      required:
        - uid
        - apiKey
      properties:
        uid:
          type: string
          example: 42fdd63831b98ee1639e23c9739c5f30c8927a6d85c093cd84e396c4317c5f2f
        note:
          type: string
          description: An optional note about the API key.
          example: "n/a"
    ApiKeys.Create:
      allOf:
        - $ref: '#/components/schemas/ApiKeys.ApiKey'
        - $ref: '#/components/schemas/ApiKeys.Create.ApiKey'
    ApiKeys.Create.ApiKey:
      properties:
        apiKey:
          type: string
          description: "The key credential that you can use as means to obtain tokes to use this API. You
          will only see this once upon creating an API key."
          minLength: 1
          example: eyJ0ZW5hbnRVaWQiOiJURUY4QkM0QzlFMEE0NUZCRjAyNjg3M0FDRDU0RjQzOTQ4QTMxRjcwQzU5NTYzQzQ1NkQ3NDI3NDgzMDBGRDIxIiwiYXBpS2V5UGxhaW4iOiJjOTZlMmNmYTRhNjkwNDRiMzc4Y2IzYzYxMGMxNzJlMGE1ZTkzZDNkZDQwZDM4ZTBmNmM3YzBiNmFiNjQ3ODY5In0=
    ApiKeys.List:
      type: object
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ApiKeys.ApiKey'
    Functions.Name:
      type: string
      pattern: "^[a-zA-Z0-9_-]{1,64}$"
      example: myFunction
    Functions.List:
      type: object
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Functions.List.Item"
    Functions.List.Item:
      allOf:
        - $ref: "#/components/schemas/Functions.Partial.Name"
        - $ref: "#/components/schemas/Functions.Partial"
    Functions.CreateOrUpdate:
      allOf:
        - $ref: "#/components/schemas/Functions.Partial"
        - $ref: "#/components/schemas/Functions.Partial.Exec"
    Functions.Function:
      allOf:
        - $ref: "#/components/schemas/Functions.Partial.Name"
        - $ref: "#/components/schemas/Functions.Partial.Updated"
        - $ref: "#/components/schemas/Functions.Partial"
        - $ref: "#/components/schemas/Functions.Partial.Exec"
    Functions.Partial.Name:
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the function.
          minLength: 1
    Functions.Partial.Updated:
      required:
        - updated
      properties:
        updated:
          type: integer
          format: int64
          description: Time when the function was last updated.
    Functions.Partial.Exec:
      required:
        - exec
      properties:
        exec:
          $ref: "#/components/schemas/Functions.Function.Exec"
    Functions.Partial:
      required:
        - version
        - limits
        - hash
      properties:
        version:
          type: string
          description: Semantic version of the function.
          pattern: "^(0|[1-9]\\d{0,8})\\.(0|[1-9]\\d{0,8})\\.(0|[1-9]\\d{0,8})$"
          example: "1.2.3"
        limits:
          $ref: "#/components/schemas/Functions.Function.Limits"
        hash:
          type: string
          description: The SHA256 of the function code.
          pattern: "^[A-Z\\d]{1,64}$"
          example: 7EC88782A989E8C9F989CB898E97866554343445A7EC88782A989E8C9F989CB8
    Functions.Function.Exec:
      description: The actual code and entrypoint that's executed in the context of the function.
      required:
        - code
        - main
      properties:
        code:
          type: string
          description: The code to execute.
          pattern: "^[a-zA-Z0-9+/=]+$"
        main:
          type: string
          description: The entry point of the code.
          pattern: "^[a-zA-Z0-9+/=]+$"
    Functions.Function.Limits:
      description: Limits on a specific function.
      properties:
        timeout:
          type: integer
          format: int32
          description: Timeout in milliseconds.
          default: 60000
          minimum: 100
          maximum: 300000
        memory:
          type: integer
          format: int32
          description: Memory in megabytes.
          default: 256
          minimum: 128
          maximum: 512
        epc:
          type: integer
          format: int32
          description: Epc in megabytes.
          default: 256
          minimum: 1
          maximum: 512
    Storage.Path:
      type: string
      example: directory/file.txt
    Storage.FileName:
      type: string
      example: myFile.txt
    Storage.FileData:
      required:
        - fileName
        - fileData
      properties:
        fileName:
          $ref: "#/components/schemas/Storage.FileName"
        fileData:
          type: string
          description: Contents of the file
          minLength: 1
    Storage.FileMeta:
      required:
        - fileName
        - size
        - lastModified
      properties:
        fileName:
          $ref: "#/components/schemas/Storage.FileName"
        size:
          type: integer
          format: int64
          description: Size of the file
        lastModified:
          type: integer
          format: int64
          description: Date of when the file was last modified
    Invocations.Invocation:
      description: Full invocation details
      type: object
      properties:
        uid:
          type: string
          description: UID of an invocation
          example: 2c37ace110144717b7ace110146717bc
        function:
          type: object
          description: The function that was invoked
          properties:
            name:
              type: string
              description: Name of the invoked function.
            version:
              type: string
              description: Semantic version of the invoked function.
          example:
            name: sayHello
            version: 223.3.4
        start:
          type: integer
          format: int64
          description: Time when the invocation began.
          example: 1656459379320
        end:
          type: integer
          format: int64
          description: Time when the invocation completed.
          example: 1656459379333
        duration:
          type: integer
          description: How long the invocation took(milliseconds).
          example: 15
        response:
          $ref: "#/components/schemas/Invocations.Invocation.Result"
        logs:
          $ref: "#/components/schemas/Invocations.Invocation.Logs"
        cause:
          type: string
          description: The invocation cause UID that caused this invocation.
        statusCode:
          type: integer
          format: int32
          description: The status code
        # TODO: Ask Roy about the 2 props below as they come from annotations -ms/s?.
        waitTime:
          type: number
          description: The time spent waiting in Conclave Cloud before the function was invoked.
          example: 7
        timeout:
          type: boolean
          description: Indicates whether the invocation exceeded the maximum permitted time for a function.
          example: false
        initTime:
          type: number
          description: The time spent initialising the function. If present, it indicates that the function required a cold start.


    Invocations.Invocation.Result:
      description: Invocation result
      type: object
      properties:
        status:
          type: string
          description: Exit status of the invocation.
        result:
          type: object
          description: The return value from the invocation.
          properties:
            result:
              type: string
              description: Base64 encoded encrypted result
        success:
          type: boolean
          description: Whether the invocation was successful or not.
        size:
          type: integer
          description: The size of the response.
      example:
        status: success
        result:
          result: ABUBAAAAAAAA=
        success: true
        size: 297


    Invocations.Invocation.Logs.List:
      description: List of logs generated by the invocation.
      type: object
      required:
        - list
      properties:
        list:
          $ref: "#/components/schemas/Invocations.Invocation.Logs"

    Invocations.Invocation.Logs:
      description: Logs generated by the invocation.
      items:
        type: string
        example: "2022-06-28T23:36:19.325672356Z stdout: 2022-06-28 23:36:19 INFO  RunHandler:38 - Invoking action."

    Invocations.Invoke:
      required:
        - name
        - data
      properties:
        name:
          $ref: "#/components/schemas/Functions.Name"
        data:
          type: string
          description: A Base64 encoded string containing encrypted parameters for the invocation.
          example: RXhhbXBsZSBGdW5jdGlvbiBEYXRh
      description: Provides the parameters to pass to a function when it is invoked.

    Invocations.List:
      type: object
      required:
        - list
      properties:
        list:
          items:
            $ref: "#/components/schemas/Invocations.Invocation"

    Platform.Info:
      type: object
      required:
        - api
      properties:
        api:
          type: object
          required:
            - version
          properties:
            version:
              description: The version of the API
              type: string
              example: 1.3.1
    Platform.Whoami:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the currently authenticated principal.
          example: johndoe
        roles:
          type: array
          description: The roles of the currently authenticated principal.
          items:
            type: string
            minLength: 1
            uniqueItems: true
            example: tenant-admin
        permissions:
          type: array
          description: The permissions of the currently authenticated principal.
          items:
            type: string
            minLength: 1
            uniqueItems: true
            example: "Invocations.Invoke"
    Projects.Create:
      type: object
      required:
        - name
      properties:
        uid:
          allOf:
            - description: UID of the project. Will be auto-generated from the name if not supplied.
            - $ref: "#/components/schemas/Project.Uid"
        name:
          type: string
          description: The name of the project. Must be unique, may not start with whitespace and can contain any printable UTF-8 characters.
          title: Project name
          example: My Project
          pattern: "^[^\P{Cc} ][\P{Cc}\P{Cn}\P{Cs}]{1,254}$"
    Projects.Project:
      type: object
      required:
        - uid
        - name
      properties:
        uid:
          type: string
          description: A project UID.
          example: 24AEC7E4D34EB65FC228297DB7BC6C2D3E2EF94CF25D4134E1502C40229DB3B6
        name:
          type: string
          description: The name of the project.
          example: My Project
    Projects.List:
      type: object
      required:
        - list
      properties:
        list:
          type: array
          items:
            $ref: "#/components/schemas/Projects.Project"
    Keys.PublicKey:
      type: object
      required:
        - keySpecification
        - publicKey
        - platformReport
        - publicKeySignature
      properties:
        keySpecification:
          $ref: "#/components/schemas/Keys.PublicKey.KeySpecification"
        publicKey:
          type: string
          description: A Base64 encoded public key.
          example: bGtzZGpmbHNrZGpmbHNkamxrc2RrbGZzamRsZmtqc2Rsa2Zqc2xka2Zqc2xkZmxzZGpsZms=
        platformReport:
          type: string
          description: The remote attestation for the key issuer.
          example: RsZmtqc2Rsa2bmbHNrZGpmbHNkamxrc2RrbGZzamZqc2xka2Zqc2xkZmxzZGpsZmsGtzZGp=
        publicKeySignature:
          type: string
          description: The signature that proves the public key and key specification are valid.
          example: D4134E1502C40229DB3B624AEC7E4D34EB65FC228297DB7BC6C2D3E2EF94CF25

    Keys.PublicKey.KeySpecification:
      type: object
      required:
        - name
        - masterKeyType
        - policyConstraint
      properties:
        name:
          type: string
          description: The name of the key.
          example: E2EF94CF25D497DB7BC6C2D313434EB65FC2282E1502C40229DB3B624AEC7E4D=
        masterKeyType:
          type: string
          description: The master key to use to derive the key from
          example: r3production
        policyConstraint:
          type: string
          description: The policy to use to constrain access of the private key material.
          example: SEC:SECURE

    Project.Uid:
      $ref: "#/components/schemas/Generic.Uid"

    ApiKey.Uid:
      $ref: "#/components/schemas/Generic.Uid"

    Generic.Uid:
      type: string
      pattern: "^[a-z0-9_-]{1,64}$"
      example: "my-uid"

    Generic.ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          description: An application specific error code.
          type: integer
          example: 120
        message:
          description: A description of the error that can be presented on a user interface.
          type: string
          example: Server Error
        detail:
          description: An optional detailed explanation of the error for use by developers - not the end user.
          type: string
          example: An unexpected server error has occurred.
        requestId:
          type: string
          example: 18450f48ea6e3e993c8ec5d24ff8ffebdf2523ec481bb2a7c392991dc5d83d80
        errors:
          type: array
          items:
            type: string
          example: []
    Platform.Usage:
      type: object
      required:
        - duration
        - memory
        - numberOfInvocations
        - megabyteMilliseconds
      properties:
        duration:
          type: integer
          description: Total duration of the invocations in milliseconds.
          example: 51233
        memory:
          type: integer
          description: Total memory allocated by the invocations in MB.
          example: 32452
        numberOfInvocations:
          type: integer
          description: Total number of invocations.
          example: 153
        megabyteMilliseconds:
          type: number
          format: int64
          description: Execution time in MB-ms.
          example: 312
    Platform.Invoicing:
      type: object
      required:
        - duration
        - initTime
        - memory
        - size
        - waitTime
        - numberOfInvocations
        - megabyteMilliseconds
      properties:
        duration:
          type: integer
          description: Total duration of the invocations in milliseconds.
          example: 51233
        initTime:
          type: integer
          description: Total time during init phase of invocations in milliseconds.
          example: 15300
        memory:
          type: integer
          description: Total memory allocated by the invocations in MB.
          example: 32452
        size:
          type: integer
          format: int64
          description: Total size of the invocation responses in bytes.
          example: 235321312
        waitTime:
          type: integer
          description: Total time during wait phase of invocations in milliseconds.
          example: 5242
        numberOfInvocations:
          type: integer
          description: Total number of invocations.
          example: 153
        megabyteMilliseconds:
          type: number
          format: int64
          description: Execution time in MB-ms.
          example: 312
          